#include "codegen.h"
#include "parser.h"

using namespace std;

namespace MICROCC {
	const char* opname[] = {
		"assign",
		"add",
		"sub",
		"mul",
		"div",
		"mod",
		"jmp",
	};
}

ostream&
MICROCC::operator<<(ostream& os, const MICROCC::MidCode& mc) {
	os << opname[static_cast<uint8_t>(mc.op)] << "\t["
		<< static_cast<ssize_t>(mc.src1) << "],\t["
		<< static_cast<ssize_t>(mc.src2) << "]\t=>["
		<< static_cast<ssize_t>(mc.dst) << "]";
	return os;
}

ostream&
MICROCC::operator<<(ostream& os, const MICROCC::MCodeTable& mctbl) {
	os << "====> MidCode Table (size: " << mctbl.size() <<
		"):\n--------------------------------------\n";
	size_t lino(0);
	for (const auto mc : mctbl)
		os << ++lino << ":\t" << mc << endl;
	os << "======================================\n";
	return os;
}

MICROCC::CodeGen::CodeGen()
{
}

MICROCC::CodeGen::~CodeGen() {
}

int
MICROCC::CodeGen::genMidCode(MidCode::OP op, const Ident& id1,
		const Ident& id2,
		const Ident& ret) {
	cout << id1.m_name << "(" << static_cast<ssize_t>(id1.m_addr) << ") "
		<< opname[static_cast<uint8_t>(op)] << " " << id2.m_name << "("
		<< static_cast<ssize_t>(id2.m_addr) << ") => " << ret.m_name
		<< "(" << static_cast<ssize_t>(ret.m_addr) << ")\n";
	/*
	cout << "id1: " << id1 << "\n" << "id2: " << id2 << "\n" << "ret: " << ret
		<< "\n";
	*/
	switch (op) {
		case MidCode::OP::assign:
			break;
		case MidCode::OP::add:
		case MidCode::OP::sub:
		case MidCode::OP::mul:
		case MidCode::OP::div:
		case MidCode::OP::mod:
			m_mct.push_back({op, id1.m_addr, id2.m_addr, ret.m_addr});
			break;
		case MidCode::OP::jmp:
			m_mct.push_back({op, id1.m_addr, static_cast<size_t>(-1),
					static_cast<size_t>(-1)});
			break;
	}
	return 0;
}

int
MICROCC::CodeGen::dumpMCode(std::ostream& os) {
	os << "THIS FILE IS GENERATED BY MICROCC, DO NOT EDIT BY HAND\n"
		<< m_mct << flush;
	return 0;
}

int
MICROCC::CodeGen::genObjCode(const MCodeTable& mctbl, OCodeTable& octbl) {
	return 0;
}

std::ostream&
MICROCC::operator<<(std::ostream& os, const ObjCode& oc) {
	switch (oc.size) {
		case 8:
			os << oc.value.v8;
			break;
		case 16:
			os << oc.value.v16;
			break;
		case 32:
			os << oc.value.v32;
			break;
		case 64:
			os << oc.value.v64;
			break;
	}
	return os;
}

int MICROCC::CodeGen::dumpOCode(std::ostream& os) {
	for (const auto oc : m_oct)
		os << oc << endl;
	return 0;
}
